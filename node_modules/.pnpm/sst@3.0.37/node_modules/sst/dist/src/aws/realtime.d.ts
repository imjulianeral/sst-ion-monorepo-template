import { IoTCustomAuthorizerHandler } from "aws-lambda";
export declare namespace realtime {
    interface AuthResult {
        /**
         * The topics the client can subscribe to.
         * @example
         * For example, this subscribes to specific topics.
         * ```js
         * {
         *   subscribe: ["chat/room1", "chat/room2"]
         * }
         * ```
         *
         * And to subscribe to all topics under a specific prefix.
         * ```js
         * {
         *   subscribe: ["chat/*"]
         * }
         * ```
         */
        subscribe?: string[];
        /**
         * The topics the client can publish to.
         * @example
         * For example, this publishes to specific topics.
         * ```js
         * {
         *   publish: ["chat/room1", "chat/room2"]
         * }
         * ```
         * And to publish to all topics under a specific prefix.
         * ```js
         * {
         *   publish: ["chat/*"]
         * }
         * ```
         */
        publish?: string[];
    }
    /**
     * Creates an authorization handler for the `Realtime` component, that validates
     * the token and grants permissions for the topics the client can subscribe and publish to.
     *
     * @example
     * ```js
     * import { realtime } from "sst/aws/realtime";
     *
     * export const handler = realtime.authorizer(async (token) => {
     *   // Validate the token
     *   console.log(token);
     *
     *   // Return the topics to subscribe and publish
     *   return {
     *     subscribe: [`${Resource.App.name}/${Resource.App.stage}/chat/room1`],
     *     publish: [`${Resource.App.name}/${Resource.App.stage}/chat/room1`],
     *   };
     * });
     * ```
     */
    function authorizer(input: (token: string) => Promise<AuthResult>): IoTCustomAuthorizerHandler;
}
