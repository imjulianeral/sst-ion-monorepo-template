import { client } from "../aws/client.js";
import { Resource } from "../resource.js";
export var bus;
(function (bus) {
    function url(options) {
        const region = options?.region || client.region;
        return `https://events.${region}.amazonaws.com/`;
    }
    function subscriber(_events, cb) {
        return async function (event) {
            const payload = {
                type: event["detail-type"],
                properties: event.detail.properties,
                metadata: event.detail.metadata,
            };
            return cb(payload, event);
        };
    }
    bus.subscriber = subscriber;
    /** @deprecated
     * use bus.subscriber instead
     * */
    bus.handler = subscriber;
    async function publish(name, def, properties, options) {
        const u = url(options?.aws);
        const evt = typeof def === "string"
            ? {
                type: def,
                properties,
                metadata: options?.metadata || {},
            }
            : await def.create(properties);
        const res = await client.fetch(u, {
            method: "POST",
            aws: options?.aws,
            headers: {
                "X-Amz-Target": "AWSEvents.PutEvents",
                "Content-Type": "application/x-amz-json-1.1",
            },
            body: JSON.stringify({
                Entries: [
                    {
                        Source: [Resource.App.name, Resource.App.stage].join("."),
                        DetailType: evt.type,
                        Detail: JSON.stringify({
                            metadata: evt.metadata,
                            payload: evt.properties,
                        }),
                        EventBusName: typeof name === "string" ? name : name.name,
                    },
                ],
            }),
        });
        if (!res.ok)
            throw new PublishError(res);
        return res.json();
    }
    bus.publish = publish;
    class PublishError extends Error {
        response;
        constructor(response) {
            super("Failed to publish event to bus");
            this.response = response;
        }
    }
    bus.PublishError = PublishError;
})(bus || (bus = {}));
