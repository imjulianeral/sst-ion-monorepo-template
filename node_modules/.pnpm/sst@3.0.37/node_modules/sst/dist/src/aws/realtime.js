export var realtime;
(function (realtime) {
    /**
     * Creates an authorization handler for the `Realtime` component, that validates
     * the token and grants permissions for the topics the client can subscribe and publish to.
     *
     * @example
     * ```js
     * import { realtime } from "sst/aws/realtime";
     *
     * export const handler = realtime.authorizer(async (token) => {
     *   // Validate the token
     *   console.log(token);
     *
     *   // Return the topics to subscribe and publish
     *   return {
     *     subscribe: [`${Resource.App.name}/${Resource.App.stage}/chat/room1`],
     *     publish: [`${Resource.App.name}/${Resource.App.stage}/chat/room1`],
     *   };
     * });
     * ```
     */
    function authorizer(input) {
        return async (evt, context) => {
            const [, , , region, accountId] = context.invokedFunctionArn.split(":");
            const token = Buffer.from(evt.protocolData.mqtt?.password ?? "", "base64").toString();
            const ret = await input(token);
            return {
                isAuthenticated: true,
                principalId: Date.now().toString(),
                disconnectAfterInSeconds: 86400,
                refreshAfterInSeconds: 300,
                policyDocuments: [
                    {
                        Version: "2012-10-17",
                        Statement: [
                            {
                                Action: "iot:Connect",
                                Effect: "Allow",
                                Resource: "*",
                            },
                            ...(ret.subscribe
                                ? [
                                    {
                                        Action: "iot:Receive",
                                        Effect: "Allow",
                                        Resource: ret.subscribe.map((t) => `arn:aws:iot:${region}:${accountId}:topic/${t}`),
                                    },
                                ]
                                : []),
                            ...(ret.subscribe
                                ? [
                                    {
                                        Action: "iot:Subscribe",
                                        Effect: "Allow",
                                        Resource: ret.subscribe.map((t) => `arn:aws:iot:${region}:${accountId}:topicfilter/${t}`),
                                    },
                                ]
                                : []),
                            ...(ret.publish
                                ? [
                                    {
                                        Action: "iot:Publish",
                                        Effect: "Allow",
                                        Resource: ret.publish.map((t) => `arn:aws:iot:${region}:${accountId}:topic/${t}`),
                                    },
                                ]
                                : []),
                        ],
                    },
                ],
            };
        };
    }
    realtime.authorizer = authorizer;
})(realtime || (realtime = {}));
