import { LambdaClient, InvokeCommand, } from "@aws-sdk/client-lambda";
import { Resource } from "../resource.js";
const lambda = new LambdaClient();
/**
 * Create a client to interact with the Vector database.
 * @example
 * ```js
 * import { VectorClient } from "sst";
 * const client = VectorClient("MyVectorDB");
 *
 * // Store a vector into the db
 * await client.put({
 *   vector: [32.4, 6.55, 11.2, 10.3, 87.9],
 *   metadata: { type: "movie", genre: "comedy" },
 * });
 *
 * // Query vectors similar to the provided vector
 * const result = await client.query({
 *   vector: [32.4, 6.55, 11.2, 10.3, 87.9],
 *   include: { type: "movie" },
 *   exclude: { genre: "thriller" },
 * });
 * ```
 */
export function VectorClient(name) {
    return {
        put: async (event) => {
            const ret = await lambda.send(new InvokeCommand({
                // @ts-expect-error
                FunctionName: Resource[name].putFunction,
                Payload: JSON.stringify(event),
            }));
            parsePayload(ret, "Failed to store into the vector db");
        },
        query: async (event) => {
            const ret = await lambda.send(new InvokeCommand({
                // @ts-expect-error
                FunctionName: Resource[name].queryFunction,
                Payload: JSON.stringify(event),
            }));
            return parsePayload(ret, "Failed to query the vector db");
        },
        remove: async (event) => {
            const ret = await lambda.send(new InvokeCommand({
                // @ts-expect-error
                FunctionName: Resource[name].removeFunction,
                Payload: JSON.stringify(event),
            }));
            parsePayload(ret, "Failed to remove from the vector db");
        },
    };
}
function parsePayload(output, message) {
    const payload = JSON.parse(Buffer.from(output.Payload).toString());
    // Set cause to the payload so that it can be logged in CloudWatch
    if (output.FunctionError) {
        const e = new Error(message);
        e.cause = payload;
        throw e;
    }
    return payload;
}
